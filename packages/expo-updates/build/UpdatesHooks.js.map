{"version":3,"file":"UpdatesHooks.js","sourceRoot":"","sources":["../src/UpdatesHooks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAEpD,OAAO,KAAK,OAAO,MAAM,WAAW,CAAC;AAGrC;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,QAAsC,EAAE,EAAE;IACxE,MAAM,WAAW,GAAG,MAAM,EAAmB,CAAC;IAE9C,SAAS,CAAC,GAAG,EAAE;QACb,WAAW,CAAC,OAAO,GAAG,QAAQ,CAAC;IACjC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEf,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,WAAW,CAAC,OAAO,EAAE;YACvB,MAAM,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAC9D,OAAO,GAAG,EAAE;gBACV,YAAY,CAAC,MAAM,EAAE,CAAC;YACxB,CAAC,CAAC;SACH;QACD,OAAO,SAAS,CAAC;IACnB,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAiC,GAAG,EAAE;IAChE,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAyB;QACnE,iBAAiB,EAAE,KAAK;QACxB,eAAe,EAAE,KAAK;QACtB,UAAU,EAAE,KAAK;QACjB,UAAU,EAAE,KAAK;QACjB,aAAa,EAAE,KAAK;QACpB,YAAY,EAAE,KAAK;QACnB,UAAU,EAAE,IAAI;QAChB,aAAa,EAAE,IAAI;QACnB,cAAc,EAAE,IAAI;QACpB,kBAAkB,EAAE,IAAI;KACzB,CAAC,CAAC;IACH,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,YAAY,GAAG,OAAO,CAAC,6BAA6B,CAAC,CAAC,KAAK,EAAE,EAAE;YACnE,MAAM,KAAK,GAA2B,EAAE,CAAC;YACzC,KAAK,MAAM,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE;gBAC9B,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAChC;YACD,aAAa,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,UAAU,EAAE,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;IACrC,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC","sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nimport * as Updates from './Updates';\nimport { UpdateEvent } from './Updates.types';\n\n/**\n * React hook to create an [`UpdateEvent`](#updateevent) listener subscription on mount, using\n * [`addListener`](#updatesaddlistenerlistener). It calls `remove()` on the subscription during unmount.\n *\n * @param listener A function that will be invoked with an [`UpdateEvent`](#updateevent) instance\n * and should not return any value.\n *\n * @example\n * ```ts\n * function App() {\n *   const eventListener = (event) => {\n *     if (event.type === Updates.UpdateEventType.ERROR) {\n *       // Handle error\n *     } else if (event.type === Updates.UpdateEventType.NO_UPDATE_AVAILABLE) {\n *       // Handle no update available\n *     } else if (event.type === Updates.UpdateEventType.UPDATE_AVAILABLE) {\n *       // Handle update available\n *     }\n *   };\n *   Updates.useUpdateEvents(eventListener);\n *   // React Component...\n * }\n * ```\n */\nexport const useUpdateEvents = (listener: (event: UpdateEvent) => void) => {\n  const listenerRef = useRef<typeof listener>();\n\n  useEffect(() => {\n    listenerRef.current = listener;\n  }, [listener]);\n\n  useEffect(() => {\n    if (listenerRef.current) {\n      const subscription = Updates.addListener(listenerRef.current);\n      return () => {\n        subscription.remove();\n      };\n    }\n    return undefined;\n  }, []);\n};\n\nexport const useUpdatesState: () => { [key: string]: any } = () => {\n  const [localState, setLocalState] = useState<{ [key: string]: any }>({\n    isUpdateAvailable: false,\n    isUpdatePending: false,\n    isRollback: false,\n    isChecking: false,\n    isDownloading: false,\n    isRestarting: false,\n    checkError: null,\n    downloadError: null,\n    latestManifest: null,\n    downloadedManifest: null,\n  });\n  useEffect(() => {\n    const subscription = Updates.addUpdatesStateChangeListener((event) => {\n      const state: { [key: string]: any } = {};\n      for (const key of event.fields) {\n        state[key] = event.values[key];\n      }\n      setLocalState((localState) => ({ ...localState, ...state }));\n    });\n    return () => subscription.remove();\n  }, []);\n  return localState;\n};\n"]}