{"version":3,"file":"UpdatesStateMachine.js","sourceRoot":"","sources":["../../src/statemachine/UpdatesStateMachine.ts"],"names":[],"mappings":"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","sourcesContent":["import { createMachine, assign } from 'xstate';\n\n/**\n * The context structure (analogous to what is exposed in @expo/use-updates)\n */\nexport interface UpdatesContext {\n  isUpdateAvailable: boolean;\n  isUpdatePending: boolean;\n  latestUpdateId?: number;\n  isChecking: boolean;\n  isDownloading: boolean;\n  downloadedUpdateId?: number;\n  checkError?: Error;\n  downloadError?: Error;\n}\n\n/**\n * Actions that modify the context\n */\nconst newManifestOnServer = assign({\n  latestUpdateId: (context: UpdatesContext, event: any) =>\n    // This models the way the real state machines will work on the clients,\n    // where this event will be generated by a server response with a new update ID.\n    event.updateId || (context?.latestUpdateId || 0) + 1,\n  checkError: () => undefined,\n  isChecking: () => false,\n  isUpdateAvailable: () => true,\n});\n\nconst sameManifestOnServer = assign({\n  latestUpdateId: (context: UpdatesContext) => context?.latestUpdateId || 0,\n  checkError: () => undefined,\n  isChecking: () => false,\n  isUpdateAvailable: () => true,\n});\n\nconst manifestDownloaded = assign({\n  downloadedUpdateId: (context: UpdatesContext, event: any) =>\n    // This models the way the real state machines will work on the clients,\n    // where this event will be generated by a server response with a new update ID.\n    event.updateId || context?.latestUpdateId || 0,\n  downloadError: () => undefined,\n  isDownloading: () => false,\n  isUpdatePending: () => true,\n});\n\nconst noManifestOnServer = assign({\n  latestUpdateId: (context: UpdatesContext) => undefined,\n  checkError: () => undefined,\n  isChecking: () => false,\n  isUpdateAvailable: () => false,\n});\n\nconst checkErrorOccurred = assign({\n  checkError: () => new Error('checkError'),\n  isChecking: () => false,\n});\n\nconst downloadErrorOccurred = assign({\n  downloadError: () => new Error('downloadError'),\n  isDownloading: () => false,\n});\n\nconst checkNow = assign({\n  isChecking: (context: UpdatesContext) => true,\n});\n\nconst downloadNow = assign({\n  isDownloading: (context: UpdatesContext) => true,\n});\n\n/**\n * Model of the expo-updates state machine, written in Typescript.\n * The actual implementations of this state machine will be in Swift on iOS and Kotlin on Android.\n */\nexport const UpdatesStateMachine = createMachine<UpdatesContext>({\n  id: 'Updates',\n  initial: 'idle',\n  context: {\n    isChecking: false,\n    isDownloading: false,\n    isUpdateAvailable: false,\n    isUpdatePending: false,\n  },\n  predictableActionArguments: true,\n  states: {\n    idle: {\n      on: {\n        CHECK: {\n          target: 'checking',\n          actions: checkNow,\n        },\n        DOWNLOAD: {\n          target: 'downloading',\n          actions: downloadNow,\n        },\n        RESTART: {\n          target: 'restarting',\n        },\n      },\n    },\n    checking: {\n      on: {\n        CHECK_COMPLETE_AVAILABLE_NEW: {\n          target: 'idle',\n          actions: [newManifestOnServer],\n        },\n        CHECK_COMPLETE_AVAILABLE_UNCHANGED: {\n          target: 'idle',\n          actions: [sameManifestOnServer],\n        },\n        CHECK_COMPLETE_UNAVAILABLE: {\n          target: 'idle',\n          actions: [noManifestOnServer],\n        },\n        CHECK_ERROR: {\n          target: 'idle',\n          actions: [checkErrorOccurred],\n        },\n      },\n    },\n    downloading: {\n      on: {\n        DOWNLOAD_COMPLETE_NEW: {\n          target: 'idle',\n          actions: [newManifestOnServer, manifestDownloaded],\n        },\n        DOWNLOAD_COMPLETE_UNCHANGED: {\n          target: 'idle',\n          actions: [manifestDownloaded],\n        },\n        DOWNLOAD_ERROR: {\n          target: 'idle',\n          actions: [downloadErrorOccurred],\n        },\n      },\n    },\n    restarting: {\n      type: 'final',\n    },\n  },\n});\n"]}